#! /bin/bash
#
# pd --- user script to send data to pdplot daemon
#
USAGE="usage:  pd [-k][-n][-p][-d N] [-w window_name] [file...]"
GOPTS='knp:rd:f:w:g:s:'
#
#   -n              don't clear the existing data
#   -k              kill the pdplot daemon, remove the pipe
#   -g <file> dump plot to <file>.png
#   -p <file> dump the plot to <file>.ps
#   -f <file> dump the plot to <file>.dxf
#   -s <file> dump the plot to <file>.svg
#   -r              refresh the window
#   -d N      debug level N (default 0)
#   -w name   specify the name of the window

CWD=`pwd`
CLEAR=${CLEAR:-clear}
KILL=${KILL:-0}

set -f
set -- `getopt "$GOPTS" "$@"`; RET=$?
set +f
if [ "$RET" -gt 0 ]; then
  echo "$USAGE" 1>&2
  exit 1
fi

while [ ! -z "$1" ]; do
  case $1 in
    -n)
      CLEAR=""
      shift
      ;;
    -r)
      CMD="plot"
      shift
      ;;
    -k)
      KILL=1
      shift
      ;;
    -d)
      DEBUG="-d $2"
      shift 2
      ;;
    -p)
      CMD="post $wd/$2"
      shift 2
      ;;
    -f)
      CMD="dxf $wd/$2"
      shift 2
      ;;
    -s)
      CMD="svg $wd/$2"
      shift 2
      ;;
    -g)
      CMD="graph $wd/$2"
      shift 2
      ;;
    -w)
      GIVEN_NAME=$2
      shift 2
      ;;
    --)
      shift
      break
      ;;
    # These cases should never be executed:
    -*)
      echo "$0 script error: option '$1' not handled" 1>&2
      exit 3
      ;;
    *)
      echo "$0: getopts error parsing option '$1'" 1>&2
      exit 4
      ;;
  esac
done

# echo $CMD

# Now only filenames are left:
FILES=$*

PDPLOT=${PDPLOT:-$CWD/PDPLOT}

GIVEN_NAME=${GIVEN_NAME:`basename $0`}

DISPLAYHOST=${DISPLAY%%[.:]*}
if [ "$DISPLAYHOST" = `hostname` -o "$DISPLAYHOST" = localhost ]; then
    WINDOW="$GIVEN_NAME"
else
    WINDOW="`HOSTNAME`.$GIVEN_NAME"
fi

PIPEDIR=${PIPEDIR:-/var/spool/sockets/pdplot}
PIPENAME=$PIPEDIR/$WINDOW.$DISPLAY

if [ -z "$DISPLAY" ]; then
    echo '$0: $DISPLAY is not set' 1>&2
    exit 5
elif [ "$DISPLAYHOST" != `hostname` -o "$DISPLAYHOST" != localhost ]; then
    DISPLAYARG="-D $DISPLAY"
fi
if [ ! -d $PIPEDIR ] ; then
    echo "$0: creating $PIPEDIR" 1>&2
    mkdir "$PIPEDIR"
    chmod 700 "$PIPEDIR"
fi
if [ "$KILL" = 1 ] ; then
    if [ ! -p "$PIPENAME" ]; then
        rm -f "$PIPENAME"
    fi
    PS=`pgrep -x "$PDPLOT"`
    if [ ! -z "$PS" ]; then
        echo "Process still alive:\n$PS"
    fi
    exit 6
fi
if [ ! -p "$PIPENAME" ]; then
    echo "$0: creating $PIPENAME" 1>&2
    /bin/rm -f "$PIPENAME"
    /usr/bin/mkfifo -m 0600 "$PIPENAME" 2>/dev/null
fi

if pgrep -x "$PDPLOT" > /dev/null; then
    : # already running
else
    echo "$0: starting pd daemon" 1>&2
    #$PDPLOT $DISPLAYARG -X $WINDOW $DEBUG < "$PIPENAME" &
    #$PDPLOT < "$PIPENAME" &
    $PDPLOT $DISPLAYARG < "$PIPENAME" &
fi

if [ ! -z "$CMD" ]; then
    echo "$CMD" > "$PIPENAME"
else
    (
      echo "$CLEAR"
      cat $FILES
      echo "" # the file might not have a newline...
      echo "plot"
    ) > "$PIPENAME"
fi

